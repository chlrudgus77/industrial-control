<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Industrial Remote Control System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
        }

        .user-controls {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a6fd8;
            transform: translateY(-2px);
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 2rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
        }

        .country-section {
            margin-bottom: 2rem;
        }

        .country-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 1.5rem;
            border-radius: 12px 12px 0 0;
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .equipment-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            padding: 1.5rem;
            border-radius: 0 0 12px 12px;
        }

        .equipment-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            border: 2px solid transparent;
        }

        .equipment-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 40px rgba(0, 0, 0, 0.15);
        }

        .equipment-card.online {
            border-color: #28a745;
        }

        .equipment-card.offline {
            border-color: #dc3545;
            opacity: 0.7;
        }

        .status-indicator {
            position: absolute;
            top: 1rem;
            right: 1rem;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .status-indicator.online {
            background: #28a745;
        }

        .status-indicator.offline {
            background: #dc3545;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .equipment-name {
            font-size: 1.1rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
            color: #333;
        }

        .equipment-details {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 1rem;
        }

        .equipment-actions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .btn-small {
            padding: 0.3rem 0.8rem;
            font-size: 0.8rem;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 15px;
            padding: 2rem;
            max-width: 90%;
            max-height: 90%;
            overflow: auto;
        }

        .control-panel {
            width: 800px;
            height: 600px;
            background: #2c3e50;
            border-radius: 10px;
            position: relative;
            overflow: hidden;
        }

        .hmi-screen {
            width: 100%;
            height: 80%;
            background: linear-gradient(45deg, #34495e, #2c3e50);
            display: flex;
            flex-direction: column;
            padding: 20px;
            color: white;
        }

        .hmi-header {
            text-align: center;
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #3498db;
        }

        .control-buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            flex: 1;
        }

        .control-btn {
            background: linear-gradient(45deg, #3498db, #2980b9);
            border: none;
            border-radius: 8px;
            color: white;
            font-size: 0.9rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 60px;
        }

        .control-btn:hover {
            background: linear-gradient(45deg, #2980b9, #3498db);
            transform: scale(1.05);
        }

        .control-btn.active {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
        }

        .status-bar {
            height: 20%;
            background: #34495e;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
            font-size: 0.9rem;
        }

        .login-form {
            max-width: 400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }

        .plc-upload-area {
            border: 2px dashed #667eea;
            border-radius: 10px;
            padding: 2rem;
            text-align: center;
            margin: 1rem 0;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .plc-upload-area:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .hidden {
            display: none;
        }

        .admin-panel {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .user-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1rem;
        }

        .user-card {
            background: white;
            border-radius: 10px;
            padding: 1rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .flag {
            font-size: 1.5rem;
            margin-right: 0.5rem;
        }
    </style>
</head>
<body>
    <!-- Login Screen -->
    <div id="loginScreen">
        <div class="container" style="margin-top: 5rem;">
            <div class="login-form">
                <h1 style="text-align: center; margin-bottom: 2rem; color: #667eea;">
                    üè≠ Industrial Remote Control
                </h1>
                <div class="form-group">
                    <label for="username">ÏÇ¨Ïö©ÏûêÎ™Ö</label>
                    <input type="text" id="username" placeholder="ÏÇ¨Ïö©ÏûêÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî">
                </div>
                <div class="form-group">
                    <label for="password">ÎπÑÎ∞ÄÎ≤àÌò∏</label>
                    <input type="password" id="password" placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî">
                </div>
                <button class="btn btn-primary" style="width: 100%;" onclick="login()">Î°úÍ∑∏Ïù∏</button>
            </div>
        </div>
    </div>

    <!-- Main Application -->
    <div id="mainApp" class="hidden">
        <div class="header">
            <div class="logo">üè≠ Industrial Remote Control System</div>
            <div class="user-controls">
                <span id="currentUser">ÏÇ¨Ïö©Ïûê</span>
                <button class="btn btn-primary" id="adminBtn" onclick="toggleAdmin()">Í¥ÄÎ¶¨Ïûê</button>
                <button class="btn btn-danger" onclick="logout()">Î°úÍ∑∏ÏïÑÏõÉ</button>
            </div>
        </div>

        <!-- Admin Panel -->
        <div id="adminPanel" class="container hidden">
            <div class="admin-panel">
                <h2 style="margin-bottom: 1rem;">üë®‚Äçüíº ÏÇ¨Ïö©Ïûê Í∂åÌïú Í¥ÄÎ¶¨</h2>
                <div class="user-list" id="userList">
                    <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
                </div>
            </div>
        </div>

        <div class="container">
            <!-- Statistics -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="totalEquipment">12</div>
                    <div>Ï¥ù Ïû•ÎπÑ Ïàò</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="onlineEquipment">8</div>
                    <div>Ïò®ÎùºÏù∏ Ïû•ÎπÑ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="offlineEquipment">4</div>
                    <div>Ïò§ÌîÑÎùºÏù∏ Ïû•ÎπÑ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="activeUsers">3</div>
                    <div>ÌôúÏÑ± ÏÇ¨Ïö©Ïûê</div>
                </div>
            </div>

            <!-- Equipment by Country -->
            <div class="country-section">
                <div class="country-header">
                    <span class="flag">üá∫üá∏</span>
                    ÎØ∏Íµ≠ (USA)
                </div>
                <div class="equipment-grid" id="usaEquipment">
                    <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
                </div>
            </div>

            <div class="country-section">
                <div class="country-header">
                    <span class="flag">üá©üá™</span>
                    ÎèÖÏùº (Germany)
                </div>
                <div class="equipment-grid" id="germanyEquipment">
                    <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
                </div>
            </div>

            <div class="country-section">
                <div class="country-header">
                    <span class="flag">üá®üá≥</span>
                    Ï§ëÍµ≠ (China)
                </div>
                <div class="equipment-grid" id="chinaEquipment">
                    <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
                </div>
            </div>
        </div>
    </div>

    <!-- HMI Control Modal -->
    <div id="hmiModal" class="modal">
        <div class="modal-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                <h2 id="modalTitle">HMI Ï†úÏñ¥Ìåê</h2>
                <button class="btn btn-danger" onclick="closeModal()">‚úï</button>
            </div>
            <div class="control-panel">
                <div class="hmi-screen">
                    <div class="hmi-header" id="hmiTitle">Production Line Control</div>
                    <div class="control-buttons">
                        <button class="control-btn" onclick="toggleControl(this, 'Motor 1')">Motor 1</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Motor 2')">Motor 2</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Pump A')">Pump A</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Pump B')">Pump B</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Valve 1')">Valve 1</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Valve 2')">Valve 2</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Heater')">Heater</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Cooler')">Cooler</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Conveyor')">Conveyor</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Alarm')">Alarm</button>
                        <button class="control-btn" onclick="emergencyStop()">üö® Emergency</button>
                        <button class="control-btn" onclick="resetSystem()">üîÑ Reset</button>
                    </div>
                </div>
                <div class="status-bar">
                    <div>Status: <span id="systemStatus">Running</span></div>
                    <div>Temp: <span id="temperature">25¬∞C</span></div>
                    <div>Pressure: <span id="pressure">1.2 bar</span></div>
                    <div>Time: <span id="currentTime"></span></div>
                </div>
            </div>
        </div>
    </div>

    <!-- PLC Upload Modal -->
    <div id="plcModal" class="modal">
        <div class="modal-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                <h2>PLC ÌîÑÎ°úÍ∑∏Îû® ÏóÖÎ°úÎìú</h2>
                <button class="btn btn-danger" onclick="closePlcModal()">‚úï</button>
            </div>
            <div class="plc-upload-area" onclick="document.getElementById('plcFile').click()">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üìÅ</div>
                <div style="font-size: 1.2rem; margin-bottom: 0.5rem;">PLC ÌîÑÎ°úÍ∑∏Îû® ÌååÏùº ÏÑ†ÌÉù</div>
                <div style="color: #666;">ÏßÄÏõê ÌòïÏãù: .s7p, .awl, .scl, .fbd</div>
                <input type="file" id="plcFile" style="display: none;" onchange="handlePlcFile(this)" accept=".s7p,.awl,.scl,.fbd">
            </div>
            <div style="margin-top: 1rem;">
                <label>
                    <input type="checkbox" id="backupCurrent"> ÌòÑÏû¨ ÌîÑÎ°úÍ∑∏Îû® Î∞±ÏóÖ
                </label>
            </div>
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-primary" onclick="uploadPlcProgram()">ÏóÖÎ°úÎìú</button>
            </div>
        </div>
    </div>

    <script>
        // ÏÇ¨Ïö©Ïûê Î∞è Ïû•ÎπÑ Îç∞Ïù¥ÌÑ∞
        let currentUser = null;
        let isAdmin = false;
        let users = [
            { id: 1, name: "ÍπÄÏóîÏßÄÎãàÏñ¥", email: "kim@company.com", active: true, role: "engineer" },
            { id: 2, name: "Ïù¥Îß§ÎãàÏ†Ä", email: "lee@company.com", active: true, role: "manager" },
            { id: 3, name: "Î∞ïÍ∏∞Ïà†Ïûê", email: "park@company.com", active: false, role: "technician" }
        ];

        let equipmentData = {
            usa: [
                { id: "USA001", name: "Production Line A", type: "HMI", plc: "S7-1500", status: "online", location: "Texas Factory" },
                { id: "USA002", name: "Packaging System", type: "HMI", plc: "S7-1200", status: "online", location: "California Plant" },
                { id: "USA003", name: "Quality Control", type: "PLC", plc: "S7-300", status: "offline", location: "New York Facility" }
            ],
            germany: [
                { id: "GER001", name: "Assembly Line", type: "HMI", plc: "S7-1500", status: "online", location: "Munich Factory" },
                { id: "GER002", name: "Robot Controller", type: "PLC", plc: "S7-400", status: "online", location: "Berlin Plant" },
                { id: "GER003", name: "Testing Station", type: "HMI", plc: "S7-1200", status: "offline", location: "Hamburg Site" }
            ],
            china: [
                { id: "CHN001", name: "Molding Machine", type: "HMI", plc: "S7-1500", status: "online", location: "Shanghai Factory" },
                { id: "CHN002", name: "Sorting System", type: "PLC", plc: "S7-300", status: "offline", location: "Beijing Plant" },
                { id: "CHN003", name: "Welding Station", type: "HMI", plc: "S7-1200", status: "online", location: "Guangzhou Site" },
                { id: "CHN004", name: "Paint Booth", type: "HMI", plc: "S7-400", status: "online", location: "Shenzhen Factory" },
                { id: "CHN005", name: "Inspection Line", type: "PLC", plc: "S7-1500", status: "offline", location: "Tianjin Plant" },
                { id: "CHN006", name: "Packaging Unit", type: "HMI", plc: "S7-1200", status: "online", location: "Chengdu Site" }
            ]
        };

        // Î°úÍ∑∏Ïù∏ Í∏∞Îä•
        function login() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            if (username && password) {
                currentUser = username;
                isAdmin = username === 'admin';
                
                document.getElementById('loginScreen').classList.add('hidden');
                document.getElementById('mainApp').classList.remove('hidden');
                document.getElementById('currentUser').textContent = username;
                
                if (isAdmin) {
                    document.getElementById('adminBtn').style.display = 'block';
                } else {
                    document.getElementById('adminBtn').style.display = 'none';
                }
                
                initializeApp();
            } else {
                alert('ÏÇ¨Ïö©ÏûêÎ™ÖÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
            }
        }

        function logout() {
            currentUser = null;
            isAdmin = false;
            document.getElementById('loginScreen').classList.remove('hidden');
            document.getElementById('mainApp').classList.add('hidden');
            document.getElementById('adminPanel').classList.add('hidden');
            document.getElementById('username').value = '';
            document.getElementById('password').value = '';
        }

        // Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê
        function toggleAdmin() {
            const adminPanel = document.getElementById('adminPanel');
            if (adminPanel.classList.contains('hidden')) {
                adminPanel.classList.remove('hidden');
                renderUserList();
            } else {
                adminPanel.classList.add('hidden');
            }
        }

        function renderUserList() {
            const userList = document.getElementById('userList');
            userList.innerHTML = users.map(user => `
                <div class="user-card">
                    <div>
                        <strong>${user.name}</strong><br>
                        <small>${user.email}</small>
                    </div>
                    <div>
                        <button class="btn ${user.active ? 'btn-danger' : 'btn-success'} btn-small" 
                                onclick="toggleUserAccess(${user.id})">
                            ${user.active ? 'Ï†ëÏÜç Ï∞®Îã®' : 'Ï†ëÏÜç ÌóàÏö©'}
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function toggleUserAccess(userId) {
            const user = users.find(u => u.id === userId);
            if (user) {
                user.active = !user.active;
                renderUserList();
                alert(`${user.name}Ïùò Ï†ëÏÜç Í∂åÌïúÏù¥ ${user.active ? 'ÌóàÏö©' : 'Ï∞®Îã®'}ÎêòÏóàÏäµÎãàÎã§.`);
            }
        }

        // Ïû•ÎπÑ Î†åÎçîÎßÅ
        function renderEquipment() {
            Object.keys(equipmentData).forEach(country => {
                const container = document.getElementById(`${country}Equipment`);
                container.innerHTML = equipmentData[country].map(equipment => `
                    <div class="equipment-card ${equipment.status}" onclick="connectToEquipment('${equipment.id}')">
                        <div class="status-indicator ${equipment.status}"></div>
                        <div class="equipment-name">${equipment.name}</div>
                        <div class="equipment-details">
                            <div>ID: ${equipment.id}</div>
                            <div>PLC: ${equipment.plc}</div>
                            <div>ÏúÑÏπò: ${equipment.location}</div>
                            <div>ÏÉÅÌÉú: ${equipment.status === 'online' ? 'Ïò®ÎùºÏù∏' : 'Ïò§ÌîÑÎùºÏù∏'}</div>
                        </div>
                        <div class="equipment-actions">
                            ${equipment.status === 'online' ? `
                                <button class="btn btn-primary btn-small" onclick="event.stopPropagation(); openHMI('${equipment.id}')">
                                    ${equipment.type} Ï†úÏñ¥
                                </button>
                                <button class="btn btn-success btn-small" onclick="event.stopPropagation(); openPLC('${equipment.id}')">
                                    PLC ÏóÖÎ°úÎìú
                                </button>
                            ` : `
                                <span style="color: #dc3545;">‚ùå Ïû•ÎπÑ Ïò§ÌîÑÎùºÏù∏</span>
                            `}
                        </div>
                    </div>
                `).join('');
            });
        }

        // HMI Ï†úÏñ¥
        function openHMI(equipmentId) {
            const equipment = findEquipment(equipmentId);
            if (equipment && equipment.status === 'online') {
                document.getElementById('modalTitle').textContent = `${equipment.name} - HMI Ï†úÏñ¥`;
                document.getElementById('hmiTitle').textContent = equipment.name;
                document.getElementById('hmiModal').style.display = 'block';
                startStatusUpdates();
            }
        }

        function closeModal() {
            document.getElementById('hmiModal').style.display = 'none';
            stopStatusUpdates();
        }

        function toggleControl(button, controlName) {
            if (button.classList.contains('active')) {
                button.classList.remove('active');
                button.style.background = 'linear-gradient(45deg, #3498db, #2980b9)';
                alert(`${controlName} Ï†ïÏßÄÎê®`);
            } else {
                button.classList.add('active');
                alert(`${controlName} ÏãúÏûëÎê®`);
            }
        }

        function emergencyStop() {
            const buttons = document.querySelectorAll('.control-btn.active');
            buttons.forEach(btn => {
                btn.classList.remove('active');
                btn.style.background = 'linear-gradient(45deg, #3498db, #2980b9)';
            });
            document.getElementById('systemStatus').textContent = 'Emergency Stop';
            alert('üö® ÎπÑÏÉÅÏ†ïÏßÄÍ∞Ä Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§!');
        }

        function resetSystem() {
            document.getElementById('systemStatus').textContent = 'Running';
            alert('üîÑ ÏãúÏä§ÌÖúÏù¥ Î¶¨ÏÖãÎêòÏóàÏäµÎãàÎã§.');
        }

        // PLC ÏóÖÎ°úÎìú
        function openPLC(equipmentId) {
            const equipment = findEquipment(equipmentId);
            if (equipment && equipment.status === 'online') {
                document.getElementById('plcModal').style.display = 'block';
                window.currentPlcEquipment = equipmentId;
            }
        }

        function closePlcModal() {
            document.getElementById('plcModal').style.display = 'none';
        }

        function handlePlcFile(input) {
            const file = input.files[0];
            if (file) {
                const uploadArea = document.querySelector('.plc-upload-area');
                uploadArea.innerHTML = `
                    <div style="font-size: 2rem; margin-bottom: 1rem;">üìÑ</div>
                    <div style="font-size: 1.1rem; color: #28a745;">${file.name}</div>
                    <div style="color: #666; font-size: 0.9rem;">${(file.size / 1024).toFixed(1)} KB</div>
                `;
            }
        }

        function uploadPlcProgram() {
            const file = document.getElementById('plcFile').files[0];
            const backup = document.getElementById('backupCurrent').checked;
            
            if (!file) {
                alert('ÏóÖÎ°úÎìúÌï† ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.');
                return;
            }

            // ÏãúÎÆ¨Î†àÏù¥ÏÖòÎêú ÏóÖÎ°úÎìú Í≥ºÏ†ï
            const equipment = findEquipment(window.currentPlcEquipment);
            alert(`${equipment.name}Ïóê PLC ÌîÑÎ°úÍ∑∏Îû®ÏùÑ ÏóÖÎ°úÎìúÌï©ÎãàÎã§...\n` +
                  `ÌååÏùº: ${file.name}\n` +
                  `Î∞±ÏóÖ: ${backup ? 'Ïòà' : 'ÏïÑÎãàÏò§'}\n\n` +
                  `‚úÖ ÏóÖÎ°úÎìúÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.`);
            
            closePlcModal();
        }

        // Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
        function findEquipment(id) {
            for (const country of Object.values(equipmentData)) {
                const equipment = country.find(eq => eq.id === id);
                if (equipment) return equipment;
            }
            return null;
        }

        function connectToEquipment(equipmentId) {
            const equipment = findEquipment(equipmentId);
            if (equipment.status === 'offline') {
                alert(`${equipment.name} Ïû•ÎπÑÍ∞Ä Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉúÏûÖÎãàÎã§.`);
            }
        }

        // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        let statusInterval;
        
        function startStatusUpdates() {
            statusInterval = setInterval(() => {
                const now = new Date
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Industrial Remote Control System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
        }

        .user-controls {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a6fd8;
            transform: translateY(-2px);
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 2rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
        }

        .country-section {
            margin-bottom: 2rem;
        }

        .country-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 1.5rem;
            border-radius: 12px 12px 0 0;
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .equipment-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            padding: 1.5rem;
            border-radius: 0 0 12px 12px;
        }

        .equipment-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            border: 2px solid transparent;
        }

        .equipment-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 40px rgba(0, 0, 0, 0.15);
        }

        .equipment-card.online {
            border-color: #28a745;
        }

        .equipment-card.offline {
            border-color: #dc3545;
            opacity: 0.7;
        }

        .status-indicator {
            position: absolute;
            top: 1rem;
            right: 1rem;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .status-indicator.online {
            background: #28a745;
        }

        .status-indicator.offline {
            background: #dc3545;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .equipment-name {
            font-size: 1.1rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
            color: #333;
        }

        .equipment-details {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 1rem;
        }

        .equipment-actions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .btn-small {
            padding: 0.3rem 0.8rem;
            font-size: 0.8rem;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 15px;
            padding: 2rem;
            max-width: 90%;
            max-height: 90%;
            overflow: auto;
        }

        .control-panel {
            width: 800px;
            height: 600px;
            background: #2c3e50;
            border-radius: 10px;
            position: relative;
            overflow: hidden;
        }

        .hmi-screen {
            width: 100%;
            height: 80%;
            background: linear-gradient(45deg, #34495e, #2c3e50);
            display: flex;
            flex-direction: column;
            padding: 20px;
            color: white;
        }

        .hmi-header {
            text-align: center;
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #3498db;
        }

        .control-buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            flex: 1;
        }

        .control-btn {
            background: linear-gradient(45deg, #3498db, #2980b9);
            border: none;
            border-radius: 8px;
            color: white;
            font-size: 0.9rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 60px;
        }

        .control-btn:hover {
            background: linear-gradient(45deg, #2980b9, #3498db);
            transform: scale(1.05);
        }

        .control-btn.active {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
        }

        .status-bar {
            height: 20%;
            background: #34495e;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
            font-size: 0.9rem;
        }

        .login-form {
            max-width: 400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
        }

        .plc-upload-area {
            border: 2px dashed #667eea;
            border-radius: 10px;
            padding: 2rem;
            text-align: center;
            margin: 1rem 0;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .plc-upload-area:hover {
            background: rgba(102, 126, 234, 0.1);
        }

        .hidden {
            display: none;
        }

        .admin-panel {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .user-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1rem;
        }

        .user-card {
            background: white;
            border-radius: 10px;
            padding: 1rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .flag {
            font-size: 1.5rem;
            margin-right: 0.5rem;
        }
    </style>
</head>
<body>
    <!-- Login Screen -->
    <div id="loginScreen">
        <div class="container" style="margin-top: 5rem;">
            <div class="login-form">
                <h1 style="text-align: center; margin-bottom: 2rem; color: #667eea;">
                    üè≠ Industrial Remote Control
                </h1>
                <div class="form-group">
                    <label for="username">ÏÇ¨Ïö©ÏûêÎ™Ö</label>
                    <input type="text" id="username" placeholder="ÏÇ¨Ïö©ÏûêÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî">
                </div>
                <div class="form-group">
                    <label for="password">ÎπÑÎ∞ÄÎ≤àÌò∏</label>
                    <input type="password" id="password" placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî">
                </div>
                <button class="btn btn-primary" style="width: 100%;" onclick="login()">Î°úÍ∑∏Ïù∏</button>
            </div>
        </div>
    </div>

    <!-- Main Application -->
    <div id="mainApp" class="hidden">
        <div class="header">
            <div class="logo">üè≠ Industrial Remote Control System</div>
            <div class="user-controls">
                <span id="currentUser">ÏÇ¨Ïö©Ïûê</span>
                <button class="btn btn-primary" id="adminBtn" onclick="toggleAdmin()">Í¥ÄÎ¶¨Ïûê</button>
                <button class="btn btn-danger" onclick="logout()">Î°úÍ∑∏ÏïÑÏõÉ</button>
            </div>
        </div>

        <!-- Admin Panel -->
        <div id="adminPanel" class="container hidden">
            <div class="admin-panel">
                <h2 style="margin-bottom: 1rem;">üë®‚Äçüíº ÏÇ¨Ïö©Ïûê Í∂åÌïú Í¥ÄÎ¶¨</h2>
                <div class="user-list" id="userList">
                    <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
                </div>
            </div>
        </div>

        <div class="container">
            <!-- Statistics -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="totalEquipment">12</div>
                    <div>Ï¥ù Ïû•ÎπÑ Ïàò</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="onlineEquipment">8</div>
                    <div>Ïò®ÎùºÏù∏ Ïû•ÎπÑ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="offlineEquipment">4</div>
                    <div>Ïò§ÌîÑÎùºÏù∏ Ïû•ÎπÑ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="activeUsers">3</div>
                    <div>ÌôúÏÑ± ÏÇ¨Ïö©Ïûê</div>
                </div>
            </div>

            <!-- Equipment by Country -->
            <div class="country-section">
                <div class="country-header">
                    <span class="flag">üá∫üá∏</span>
                    ÎØ∏Íµ≠ (USA)
                </div>
                <div class="equipment-grid" id="usaEquipment">
                    <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
                </div>
            </div>

            <div class="country-section">
                <div class="country-header">
                    <span class="flag">üá©üá™</span>
                    ÎèÖÏùº (Germany)
                </div>
                <div class="equipment-grid" id="germanyEquipment">
                    <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
                </div>
            </div>

            <div class="country-section">
                <div class="country-header">
                    <span class="flag">üá®üá≥</span>
                    Ï§ëÍµ≠ (China)
                </div>
                <div class="equipment-grid" id="chinaEquipment">
                    <!-- ÎèôÏ†ÅÏúºÎ°ú ÏÉùÏÑ±Îê® -->
                </div>
            </div>
        </div>
    </div>

    <!-- HMI Control Modal -->
    <div id="hmiModal" class="modal">
        <div class="modal-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                <h2 id="modalTitle">HMI Ï†úÏñ¥Ìåê</h2>
                <button class="btn btn-danger" onclick="closeModal()">‚úï</button>
            </div>
            <div class="control-panel">
                <div class="hmi-screen">
                    <div class="hmi-header" id="hmiTitle">Production Line Control</div>
                    <div class="control-buttons">
                        <button class="control-btn" onclick="toggleControl(this, 'Motor 1')">Motor 1</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Motor 2')">Motor 2</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Pump A')">Pump A</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Pump B')">Pump B</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Valve 1')">Valve 1</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Valve 2')">Valve 2</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Heater')">Heater</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Cooler')">Cooler</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Conveyor')">Conveyor</button>
                        <button class="control-btn" onclick="toggleControl(this, 'Alarm')">Alarm</button>
                        <button class="control-btn" onclick="emergencyStop()">üö® Emergency</button>
                        <button class="control-btn" onclick="resetSystem()">üîÑ Reset</button>
                    </div>
                </div>
                <div class="status-bar">
                    <div>Status: <span id="systemStatus">Running</span></div>
                    <div>Temp: <span id="temperature">25¬∞C</span></div>
                    <div>Pressure: <span id="pressure">1.2 bar</span></div>
                    <div>Time: <span id="currentTime"></span></div>
                </div>
            </div>
        </div>
    </div>

    <!-- PLC Upload Modal -->
    <div id="plcModal" class="modal">
        <div class="modal-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                <h2>PLC ÌîÑÎ°úÍ∑∏Îû® ÏóÖÎ°úÎìú</h2>
                <button class="btn btn-danger" onclick="closePlcModal()">‚úï</button>
            </div>
            <div class="plc-upload-area" onclick="document.getElementById('plcFile').click()">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üìÅ</div>
                <div style="font-size: 1.2rem; margin-bottom: 0.5rem;">PLC ÌîÑÎ°úÍ∑∏Îû® ÌååÏùº ÏÑ†ÌÉù</div>
                <div style="color: #666;">ÏßÄÏõê ÌòïÏãù: .s7p, .awl, .scl, .fbd</div>
                <input type="file" id="plcFile" style="display: none;" onchange="handlePlcFile(this)" accept=".s7p,.awl,.scl,.fbd">
            </div>
            <div style="margin-top: 1rem;">
                <label>
                    <input type="checkbox" id="backupCurrent"> ÌòÑÏû¨ ÌîÑÎ°úÍ∑∏Îû® Î∞±ÏóÖ
                </label>
            </div>
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-primary" onclick="uploadPlcProgram()">ÏóÖÎ°úÎìú</button>
            </div>
        </div>
    </div>

    <script>
        // ÏÇ¨Ïö©Ïûê Î∞è Ïû•ÎπÑ Îç∞Ïù¥ÌÑ∞
        let currentUser = null;
        let isAdmin = false;
        let users = [
            { id: 1, name: "ÍπÄÏóîÏßÄÎãàÏñ¥", email: "kim@company.com", active: true, role: "engineer" },
            { id: 2, name: "Ïù¥Îß§ÎãàÏ†Ä", email: "lee@company.com", active: true, role: "manager" },
            { id: 3, name: "Î∞ïÍ∏∞Ïà†Ïûê", email: "park@company.com", active: false, role: "technician" }
        ];

        let equipmentData = {
            usa: [
                { id: "USA001", name: "Production Line A", type: "HMI", plc: "S7-1500", status: "online", location: "Texas Factory" },
                { id: "USA002", name: "Packaging System", type: "HMI", plc: "S7-1200", status: "online", location: "California Plant" },
                { id: "USA003", name: "Quality Control", type: "PLC", plc: "S7-300", status: "offline", location: "New York Facility" }
            ],
            germany: [
                { id: "GER001", name: "Assembly Line", type: "HMI", plc: "S7-1500", status: "online", location: "Munich Factory" },
                { id: "GER002", name: "Robot Controller", type: "PLC", plc: "S7-400", status: "online", location: "Berlin Plant" },
                { id: "GER003", name: "Testing Station", type: "HMI", plc: "S7-1200", status: "offline", location: "Hamburg Site" }
            ],
            china: [
                { id: "CHN001", name: "Molding Machine", type: "HMI", plc: "S7-1500", status: "online", location: "Shanghai Factory" },
                { id: "CHN002", name: "Sorting System", type: "PLC", plc: "S7-300", status: "offline", location: "Beijing Plant" },
                { id: "CHN003", name: "Welding Station", type: "HMI", plc: "S7-1200", status: "online", location: "Guangzhou Site" },
                { id: "CHN004", name: "Paint Booth", type: "HMI", plc: "S7-400", status: "online", location: "Shenzhen Factory" },
                { id: "CHN005", name: "Inspection Line", type: "PLC", plc: "S7-1500", status: "offline", location: "Tianjin Plant" },
                { id: "CHN006", name: "Packaging Unit", type: "HMI", plc: "S7-1200", status: "online", location: "Chengdu Site" }
            ]
        };

        // Î°úÍ∑∏Ïù∏ Í∏∞Îä•
        function login() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            if (username && password) {
                currentUser = username;
                isAdmin = username === 'admin';
                
                document.getElementById('loginScreen').classList.add('hidden');
                document.getElementById('mainApp').classList.remove('hidden');
                document.getElementById('currentUser').textContent = username;
                
                if (isAdmin) {
                    document.getElementById('adminBtn').style.display = 'block';
                } else {
                    document.getElementById('adminBtn').style.display = 'none';
                }
                
                initializeApp();
            } else {
                alert('ÏÇ¨Ïö©ÏûêÎ™ÖÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
            }
        }

        function logout() {
            currentUser = null;
            isAdmin = false;
            document.getElementById('loginScreen').classList.remove('hidden');
            document.getElementById('mainApp').classList.add('hidden');
            document.getElementById('adminPanel').classList.add('hidden');
            document.getElementById('username').value = '';
            document.getElementById('password').value = '';
        }

        // Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê
        function toggleAdmin() {
            const adminPanel = document.getElementById('adminPanel');
            if (adminPanel.classList.contains('hidden')) {
                adminPanel.classList.remove('hidden');
                renderUserList();
            } else {
                adminPanel.classList.add('hidden');
            }
        }

        function renderUserList() {
            const userList = document.getElementById('userList');
            userList.innerHTML = users.map(user => `
                <div class="user-card">
                    <div>
                        <strong>${user.name}</strong><br>
                        <small>${user.email}</small>
                    </div>
                    <div>
                        <button class="btn ${user.active ? 'btn-danger' : 'btn-success'} btn-small" 
                                onclick="toggleUserAccess(${user.id})">
                            ${user.active ? 'Ï†ëÏÜç Ï∞®Îã®' : 'Ï†ëÏÜç ÌóàÏö©'}
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function toggleUserAccess(userId) {
            const user = users.find(u => u.id === userId);
            if (user) {
                user.active = !user.active;
                renderUserList();
                alert(`${user.name}Ïùò Ï†ëÏÜç Í∂åÌïúÏù¥ ${user.active ? 'ÌóàÏö©' : 'Ï∞®Îã®'}ÎêòÏóàÏäµÎãàÎã§.`);
            }
        }

        // Ïû•ÎπÑ Î†åÎçîÎßÅ
        function renderEquipment() {
            Object.keys(equipmentData).forEach(country => {
                const container = document.getElementById(`${country}Equipment`);
                container.innerHTML = equipmentData[country].map(equipment => `
                    <div class="equipment-card ${equipment.status}" onclick="connectToEquipment('${equipment.id}')">
                        <div class="status-indicator ${equipment.status}"></div>
                        <div class="equipment-name">${equipment.name}</div>
                        <div class="equipment-details">
                            <div>ID: ${equipment.id}</div>
                            <div>PLC: ${equipment.plc}</div>
                            <div>ÏúÑÏπò: ${equipment.location}</div>
                            <div>ÏÉÅÌÉú: ${equipment.status === 'online' ? 'Ïò®ÎùºÏù∏' : 'Ïò§ÌîÑÎùºÏù∏'}</div>
                        </div>
                        <div class="equipment-actions">
                            ${equipment.status === 'online' ? `
                                <button class="btn btn-primary btn-small" onclick="event.stopPropagation(); openHMI('${equipment.id}')">
                                    ${equipment.type} Ï†úÏñ¥
                                </button>
                                <button class="btn btn-success btn-small" onclick="event.stopPropagation(); openPLC('${equipment.id}')">
                                    PLC ÏóÖÎ°úÎìú
                                </button>
                            ` : `
                                <span style="color: #dc3545;">‚ùå Ïû•ÎπÑ Ïò§ÌîÑÎùºÏù∏</span>
                            `}
                        </div>
                    </div>
                `).join('');
            });
        }

        // HMI Ï†úÏñ¥
        function openHMI(equipmentId) {
            const equipment = findEquipment(equipmentId);
            if (equipment && equipment.status === 'online') {
                document.getElementById('modalTitle').textContent = `${equipment.name} - HMI Ï†úÏñ¥`;
                document.getElementById('hmiTitle').textContent = equipment.name;
                document.getElementById('hmiModal').style.display = 'block';
                startStatusUpdates();
            }
        }

        function closeModal() {
            document.getElementById('hmiModal').style.display = 'none';
            stopStatusUpdates();
        }

        function toggleControl(button, controlName) {
            if (button.classList.contains('active')) {
                button.classList.remove('active');
                button.style.background = 'linear-gradient(45deg, #3498db, #2980b9)';
                alert(`${controlName} Ï†ïÏßÄÎê®`);
            } else {
                button.classList.add('active');
                alert(`${controlName} ÏãúÏûëÎê®`);
            }
        }

        function emergencyStop() {
            const buttons = document.querySelectorAll('.control-btn.active');
            buttons.forEach(btn => {
                btn.classList.remove('active');
                btn.style.background = 'linear-gradient(45deg, #3498db, #2980b9)';
            });
            document.getElementById('systemStatus').textContent = 'Emergency Stop';
            alert('üö® ÎπÑÏÉÅÏ†ïÏßÄÍ∞Ä Ïã§ÌñâÎêòÏóàÏäµÎãàÎã§!');
        }

        function resetSystem() {
            document.getElementById('systemStatus').textContent = 'Running';
            alert('üîÑ ÏãúÏä§ÌÖúÏù¥ Î¶¨ÏÖãÎêòÏóàÏäµÎãàÎã§.');
        }

        // PLC ÏóÖÎ°úÎìú
        function openPLC(equipmentId) {
            const equipment = findEquipment(equipmentId);
            if (equipment && equipment.status === 'online') {
                document.getElementById('plcModal').style.display = 'block';
                window.currentPlcEquipment = equipmentId;
            }
        }

        function closePlcModal() {
            document.getElementById('plcModal').style.display = 'none';
        }

        function handlePlcFile(input) {
            const file = input.files[0];
            if (file) {
                const uploadArea = document.querySelector('.plc-upload-area');
                uploadArea.innerHTML = `
                    <div style="font-size: 2rem; margin-bottom: 1rem;">üìÑ</div>
                    <div style="font-size: 1.1rem; color: #28a745;">${file.name}</div>
                    <div style="color: #666; font-size: 0.9rem;">${(file.size / 1024).toFixed(1)} KB</div>
                `;
            }
        }

        function uploadPlcProgram() {
            const file = document.getElementById('plcFile').files[0];
            const backup = document.getElementById('backupCurrent').checked;
            
            if (!file) {
                alert('ÏóÖÎ°úÎìúÌï† ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.');
                return;
            }

            // ÏãúÎÆ¨Î†àÏù¥ÏÖòÎêú ÏóÖÎ°úÎìú Í≥ºÏ†ï
            const equipment = findEquipment(window.currentPlcEquipment);
            alert(`${equipment.name}Ïóê PLC ÌîÑÎ°úÍ∑∏Îû®ÏùÑ ÏóÖÎ°úÎìúÌï©ÎãàÎã§...\n` +
                  `ÌååÏùº: ${file.name}\n` +
                  `Î∞±ÏóÖ: ${backup ? 'Ïòà' : 'ÏïÑÎãàÏò§'}\n\n` +
                  `‚úÖ ÏóÖÎ°úÎìúÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.`);
            
            closePlcModal();
        }

        // Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
        function findEquipment(id) {
            for (const country of Object.values(equipmentData)) {
                const equipment = country.find(eq => eq.id === id);
                if (equipment) return equipment;
            }
            return null;
        }

        function connectToEquipment(equipmentId) {
            const equipment = findEquipment(equipmentId);
            if (equipment.status === 'offline') {
                alert(`${equipment.name} Ïû•ÎπÑÍ∞Ä Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉúÏûÖÎãàÎã§.`);
            }
        }

        // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        let statusInterval;
        
        function startStatusUpdates() {
            statusInterval = setInterval(() => {
                const now = new Date();
                document.getElementById('currentTime').textContent = now.toLocaleTimeString('ko-KR');
                
                // ÎûúÎç§ ÏÑºÏÑú Í∞í ÏóÖÎç∞Ïù¥Ìä∏
                const temp = (20 + Math.random() * 15).toFixed(1);
                const pressure = (1.0 + Math.random() * 0.5).toFixed(1);
                
                document.getElementById('temperature').textContent = temp + '¬∞C';
                document.getElementById('pressure').textContent = pressure + ' bar';
            }, 1000);
        }

        function stopStatusUpdates() {
            if (statusInterval) {
                clearInterval(statusInterval);
            }
        }

        // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        function updateStats() {
            let totalEquipment = 0;
            let onlineEquipment = 0;
            let offlineEquipment = 0;

            Object.values(equipmentData).forEach(countryEquipment => {
                totalEquipment += countryEquipment.length;
                countryEquipment.forEach(equipment => {
                    if (equipment.status === 'online') {
                        onlineEquipment++;
                    } else {
                        offlineEquipment++;
                    }
                });
            });

            document.getElementById('totalEquipment').textContent = totalEquipment;
            document.getElementById('onlineEquipment').textContent = onlineEquipment;
            document.getElementById('offlineEquipment').textContent = offlineEquipment;
            document.getElementById('activeUsers').textContent = users.filter(u => u.active).length;
        }

        // ixRouter ÌÜµÏã† ÏãúÎÆ¨Î†àÏù¥ÏÖò
        function simulateIxRouterConnection(equipmentId) {
            const equipment = findEquipment(equipmentId);
            if (!equipment) return false;

            // ixRouterÎ•º ÌÜµÌïú Ïó∞Í≤∞ ÏãúÎÆ¨Î†àÏù¥ÏÖò
            console.log(`ixRouterÎ•º ÌÜµÌï¥ ${equipment.name} (${equipmentId})Ïóê Ïó∞Í≤∞ Ï§ë...`);
            
            // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Ïó¨Í∏∞Ïóê ixRouter API Ìò∏Ï∂úÏù¥ Îì§Ïñ¥Í∞ëÎãàÎã§
            // Example: await ixRouterAPI.connect(equipmentId);
            
            return equipment.status === 'online';
        }

        // Ïã§ÏãúÍ∞Ñ Ïû•ÎπÑ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ
        function monitorEquipmentStatus() {
            setInterval(() => {
                // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî ixRouterÎ•º ÌÜµÌï¥ Ïû•ÎπÑ ÏÉÅÌÉúÎ•º ÌôïÏù∏
                Object.values(equipmentData).forEach(countryEquipment => {
                    countryEquipment.forEach(equipment => {
                        // ÎûúÎç§ÌïòÍ≤å Ïû•ÎπÑ ÏÉÅÌÉú Î≥ÄÍ≤Ω (Îç∞Î™®Ïö©)
                        if (Math.random() < 0.02) { // 2% ÌôïÎ•†Î°ú ÏÉÅÌÉú Î≥ÄÍ≤Ω
                            equipment.status = equipment.status === 'online' ? 'offline' : 'online';
                        }
                    });
                });
                
                renderEquipment();
                updateStats();
            }, 5000); // 5Ï¥àÎßàÎã§ ÏÉÅÌÉú ÌôïÏù∏
        }

        // Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¥àÍ∏∞Ìôî
        function initializeApp() {
            renderEquipment();
            updateStats();
            monitorEquipmentStatus();
            
            // ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
            setInterval(() => {
                const elements = document.querySelectorAll('#currentTime');
                const now = new Date();
                elements.forEach(el => {
                    if (el) el.textContent = now.toLocaleTimeString('ko-KR');
                });
            }, 1000);
        }

        // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§
        document.addEventListener('keydown', function(e) {
            // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
            if (e.key === 'Escape') {
                closeModal();
                closePlcModal();
            }
            
            // Ctrl + AÎ°ú Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê ÌÜ†Í∏Ä (Í¥ÄÎ¶¨ÏûêÎßå)
            if (e.ctrlKey && e.key === 'a' && isAdmin) {
                e.preventDefault();
                toggleAdmin();
            }
        });

        // Î™®Îã¨ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
        window.onclick = function(event) {
            const hmiModal = document.getElementById('hmiModal');
            const plcModal = document.getElementById('plcModal');
            
            if (event.target === hmiModal) {
                closeModal();
            }
            if (event.target === plcModal) {
                closePlcModal();
            }
        }

        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Î°úÍ∑∏Ïù∏ ÌèºÏóê Ìè¨Ïª§Ïä§
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('username').focus();
            
            // Enter ÌÇ§Î°ú Î°úÍ∑∏Ïù∏
            document.getElementById('username').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    document.getElementById('password').focus();
                }
            });
            
            document.getElementById('password').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    login();
                }
            });
        });

        // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ
        window.addEventListener('online', function() {
            console.log('ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Îê®');
            // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî ixRouter Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ
        });

        window.addEventListener('offline', function() {
            console.log('ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ ÎÅäÍπÄ');
            alert('‚ö†Ô∏è ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥Ï°åÏäµÎãàÎã§. Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
        });

        // Î≥¥Ïïà: ÏùºÏ†ï ÏãúÍ∞Ñ ÌõÑ ÏûêÎèô Î°úÍ∑∏ÏïÑÏõÉ
        let inactivityTimer;
        const INACTIVITY_TIME = 30 * 60 * 1000; // 30Î∂Ñ

        function resetInactivityTimer() {
            clearTimeout(inactivityTimer);
            inactivityTimer = setTimeout(() => {
                alert('Î≥¥ÏïàÏÉÅ ÏûêÎèôÏúºÎ°ú Î°úÍ∑∏ÏïÑÏõÉÎê©ÎãàÎã§.');
                logout();
            }, INACTIVITY_TIME);
        }

        // ÏÇ¨Ïö©Ïûê ÌôúÎèô Í∞êÏßÄ
        document.addEventListener('mousemove', resetInactivityTimer);
        document.addEventListener('keypress', resetInactivityTimer);
        document.addEventListener('click', resetInactivityTimer);
        document.addEventListener('scroll', resetInactivityTimer);

        // ÌååÏùº ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ ÏßÄÏõê
        function setupDragAndDrop() {
            const uploadArea = document.querySelector('.plc-upload-area');
            
            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadArea.style.backgroundColor = 'rgba(102, 126, 234, 0.1)';
            });
            
            uploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                uploadArea.style.backgroundColor = '';
            });
            
            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadArea.style.backgroundColor = '';
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    const file = files[0];
                    const fileInput = document.getElementById('plcFile');
                    
                    // ÌååÏùº ÌòïÏãù Í≤ÄÏ¶ù
                    const allowedTypes = ['.s7p', '.awl', '.scl', '.fbd'];
                    const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
                    
                    if (allowedTypes.includes(fileExtension)) {
                        // ÌååÏùº ÏûÖÎ†•Ïóê Ìï†Îãπ (Ïã§Ï†úÎ°úÎäî FileListÎ•º ÏßÅÏ†ë Ìï†ÎãπÌï† Ïàò ÏóÜÏúºÎØÄÎ°ú ÏãúÎÆ¨Î†àÏù¥ÏÖò)
                        handlePlcFile({ files: [file] });
                    } else {
                        alert('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§.\nÏßÄÏõê ÌòïÏãù: ' + allowedTypes.join(', '));
                    }
                }
            });
        }

        // Ï¥àÍ∏∞ ÏÑ§Ï†ï
        setTimeout(setupDragAndDrop, 100);
    </script>
</body>
</html>
